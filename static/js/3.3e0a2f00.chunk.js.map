{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/input.js","components/UI/Input/input.module.css","components/Order/CheckoutSummary/checkout-summary.module.css","containers/Checkout/ContactData/contact-data.module.css"],"names":["checkoutSummary","props","className","styles","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onProcessOrder","actions","withErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","postalCode","maxLength","minLength","country","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","push","id","config","form","onSubmit","event","preventDefault","customerData","formElementIdentifier","customer","map","formElement","shouldValidate","changed","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedForm","inputChangedHandler","disabled","Spinner","contactData","axios","purchased","summary","to","purchasedRedirect","CheckoutSummary","history","goBack","replace","match","path","component","ContactData","input","inputElement","inpuntClasses","invalid","join","onChange","option","label","module","exports"],"mappings":"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","file":"static/js/3.3e0a2f00.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport styles from './checkout-summary.module.css';\nconst checkoutSummary = (props) => {\n    return (\n        <div className={styles.checkoutSummary}>\n            <h1>We hope it tastes well !!</h1>\n            <div style={{ width:'100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType=\"danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"success\" clicked={props.checkoutContinued}>SUCCESS</Button>\n        </div>\n    )\n\n}\n\nexport default checkoutSummary;","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/input';\nimport styles from './contact-data.module.css';\nimport axios from '../../../axios-orders';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updatedObject, checkValidity } from '../../../shared/utility';\n\nconst ContactData = props => {\n\n    const [orderForm, setOrderForm]= useState({\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your name'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your Email'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        street: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Street'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        postalCode: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Postal Code'\n            },\n            value: '',\n            validation: {\n                required: true,\n                maxLength: 5,\n                minLength: 5\n            },\n            valid: false,\n            touched: false\n        },\n        country: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Country'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        deliveryMethod: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value:'fastest',displayValue: 'Fastest'},\n                    {value:'cheapest',displayValue: 'Cheapest'} \n                ]\n            },\n            value: 'fastest',\n            validation: {\n            },\n            valid: true,\n        }\n    });\n    const [formIsValid, setFormIsValid] = useState(false);\n    \n\n    const orderHandler = (event) => {\n        event.preventDefault();\n        const customerData = {};\n        for (let formElementIdentifier in orderForm){\n            customerData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: props.ings,\n            price: props.price,\n            customer: customerData,\n            userId: props.userId\n        }\n        props.onProcessOrder(order, props.token);\n    }\n\n    const inputChangedHandler = (event, inputIdentifier) => {\n\n        const updatedFormElement = updatedObject(orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n            touched: true\n\n        })\n        const updatedForm = updatedObject(orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n        let formIsValid = true;\n        for (let inputIdentifier in updatedForm) {\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        setOrderForm(updatedForm);\n        setFormIsValid(formIsValid);\n    }\n    \n    const formElementsArray = [];\n\n    for (let key in orderForm){\n        formElementsArray.push(\n            {\n                id:key, \n                config: orderForm[key]\n            }\n        )\n    }\n    let form = (<form onSubmit={orderHandler}>\n                    {formElementsArray.map(formElement =>(\n                        <Input key ={formElement.id}\n                                    elementType={formElement.config.elementType} \n                                    elementConfig={formElement.config.elementConfig}\n                                    value={formElement.config.value}\n                                    shouldValidate={formElement.config.validation}\n                                    valid={formElement.config.valid}\n                                    touched={formElement.config.touched}\n                                    changed={(event) => inputChangedHandler(event, formElement.id)}/>\n                    ))}\n                    <Button btnType=\"success\" disabled={!formIsValid}>ORDER</Button></form>);\n\n    if (props.loading){\n        form = <Spinner/>;\n    }\n    return (\n        <div className={styles.contactData}>\n            <h4>Enter your contact data</h4>\n            {form}\n        </div>\n    );\n\n  \n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onProcessOrder: (order, token) => dispatch(actions.purchaseOrder(order, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nconst Checkout = props => {\n\n    const checkoutCancelledHandler = () => {\n        props.history.goBack();\n    }\n\n    const checkoutContinuedHandler = () => {\n        props.history.replace(props.match.path +'/contact-data');\n    }\n\n    let summary = <Redirect to=\"/\"/>;\n    if (props.ings) {\n        const purchasedRedirect = props.purchased ? <Redirect to=\"/\"/> : null;\n        summary = (\n            <div>\n                {purchasedRedirect}\n                <CheckoutSummary \n                ingredients={props.ings}\n                checkoutCancelled={checkoutCancelledHandler}\n                checkoutContinued={checkoutContinuedHandler}/>\n                <Route path={props.match.path + \"/contact-data\"} \n                    component={ContactData}/>\n            </div>\n\n        );\n    }\n    return summary;\n   \n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport styles from './input.module.css';\nconst input= (props) => {\n    let inputElement = null;\n    let inpuntClasses = [styles.inputElement];\n    if (!props.valid && props.shouldValidate && props.touched) {\n        inpuntClasses.push(styles.invalid);\n       \n    }\n    switch(props.elementType) {\n\n        case('input'):\n            inputElement=<input \n                className={inpuntClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('textarea'):\n            inputElement=<textarea \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('select'):\n            inputElement=(<select \n                    className={inpuntClasses.join(' ')}  \n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option =>(\n                        <option value={option.value} key={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>);\n        break;\n        default:\n            inputElement=<input \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n\n    }\n    return (\n        <div className={styles.input}>\n            <label>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"input_input__LuMtH\",\"label\":\"input_label__1QbaT\",\"inputElement\":\"input_inputElement__nYoeg\",\"invalid\":\"input_invalid__10w9F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkoutSummary\":\"checkout-summary_checkoutSummary__VQ2aZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactData\":\"contact-data_contactData__1NP_Q\",\"input\":\"contact-data_input__2YU7w\"};"],"sourceRoot":""}