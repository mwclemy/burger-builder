{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/input.js","components/UI/Input/input.module.css","containers/Auth/auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updatedObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","props","onAuth","this","building","authRedirectPath","onAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","shouldValidate","changed","loading","errorMessage","error","message","redirect","isAuthenticated","to","className","styles","auth","onSubmit","btnType","clicked","Component","connect","token","burgerBuilder","dispatch","actions","path","input","inputElement","inpuntClasses","invalid","join","onChange","options","option","displayValue","label","module","exports"],"mappings":"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","file":"static/js/4.f6ae9803.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport Input from '../../components/UI/Input/input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport styles from './auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updatedObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n\n            }\n\n        },\n        isSignUp: true\n    }\n\n    componentDidMount () {\n        if (!this.props.building && this.props.authRedirectPath === '/checkout') {\n            this.props.onAuthRedirectPath('/');\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updatedObject(this.state.controls, {\n            [controlName] : updatedObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(this.state.controls[controlName].value, this.state.controls[controlName].validation),\n                touched: true\n\n            })\n        });\n\n        this.setState({ controls: updatedControls});\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignUp: !prevState.isSignUp}\n        })\n    }\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n\n    }\n    render() {\n        const formElementsArray = [];\n\n        for (let key in this.state.controls){\n            formElementsArray.push(\n                {\n                    id:key, \n                    config: this.state.controls[key]\n                }\n            )\n        }\n        let form = formElementsArray\n                   .map(formElement =>(\n                        <Input key ={formElement.id}\n                            elementType={formElement.config.elementType} \n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            shouldValidate={formElement.config.validation}\n                            valid={formElement.config.valid}\n                            touched={formElement.config.touched}\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)}/>));\n\n        if (this.props.loading) {\n            form = <Spinner/>;\n        }\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p>{this.props.error.message}</p>;\n        }\n        \n        let redirect = null;\n        if (this.props.isAuthenticated) {\n            redirect = <Redirect to={this.props.authRedirectPath}/>;\n        }\n        \n        return (\n            <div className={styles.auth}>\n                {redirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"success\">SUBMIT</Button>\n                </form>\n        <Button btnType=\"danger\" clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignUp ? 'SIGN IN': 'SIGN UP'}</Button>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        building: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth : (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport styles from './input.module.css';\nconst input= (props) => {\n    let inputElement = null;\n    let inpuntClasses = [styles.inputElement];\n    if (!props.valid && props.shouldValidate && props.touched) {\n        inpuntClasses.push(styles.invalid);\n       \n    }\n    switch(props.elementType) {\n\n        case('input'):\n            inputElement=<input \n                className={inpuntClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('textarea'):\n            inputElement=<textarea \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('select'):\n            inputElement=(<select \n                    className={inpuntClasses.join(' ')}  \n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option =>(\n                        <option value={option.value} key={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>);\n        break;\n        default:\n            inputElement=<input \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n\n    }\n    return (\n        <div className={styles.input}>\n            <label>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"input_input__LuMtH\",\"label\":\"input_label__1QbaT\",\"inputElement\":\"input_inputElement__nYoeg\",\"invalid\":\"input_invalid__10w9F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"auth_auth__3CCe0\",\"input\":\"auth_input__2NybL\"};"],"sourceRoot":""}