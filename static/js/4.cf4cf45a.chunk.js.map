{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/input.js","components/UI/Input/input.module.css","containers/Auth/auth.module.css"],"names":["connect","state","loading","auth","error","isAuthenticated","token","building","burgerBuilder","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onAuthRedirectPath","path","props","useState","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","minLength","authForm","setAuthForm","setIsSignUp","useEffect","formElementsArray","key","push","id","config","form","map","formElement","shouldValidate","changed","event","controlName","updatedControls","updatedObject","target","checkValidity","inputChangedHandler","errorMessage","message","redirect","to","className","styles","onSubmit","preventDefault","btnType","clicked","input","inputElement","inpuntClasses","invalid","join","onChange","options","option","displayValue","label","module","exports"],"mappings":"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","file":"static/js/4.cf4cf45a.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport Input from '../../components/UI/Input/input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport styles from './auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updatedObject, checkValidity } from '../../shared/utility';\n\nconst Auth = props => {\n    const [authForm, setAuthForm] = useState({\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your Email'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n\n        },\n        password: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'Your Password'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n\n        }\n\n    });\n    const [isSignUp, setIsSignUp] = useState(true);\n   \n    const {building, authRedirectPath, onAuthRedirectPath} = props;\n\n    useEffect(() => {\n        if (!building && authRedirectPath === '/checkout') {\n            onAuthRedirectPath('/');\n        }\n    },[building, authRedirectPath, onAuthRedirectPath]);\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = updatedObject(authForm, {\n            [controlName] : updatedObject(authForm[controlName], {\n                value: event.target.value,\n                valid: checkValidity(authForm[controlName].value, authForm[controlName].validation),\n                touched: true\n\n            })\n        });\n\n       setAuthForm(updatedControls);\n    }\n\n    const switchAuthModeHandler = () => {\n       setIsSignUp(!isSignUp);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onAuth(authForm.email.value, authForm.password.value, isSignUp);\n\n    }\n    \n    const formElementsArray = [];\n\n    for (let key in authForm){\n        formElementsArray.push(\n            {\n                id:key, \n                config: authForm[key]\n            }\n        )\n    }\n    let form = formElementsArray\n                .map(formElement =>(\n                    <Input key ={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        shouldValidate={formElement.config.validation}\n                        valid={formElement.config.valid}\n                        touched={formElement.config.touched}\n                        changed={(event) => inputChangedHandler(event, formElement.id)}/>));\n\n    if (props.loading) {\n        form = <Spinner/>;\n    }\n    let errorMessage = null;\n    if (props.error) {\n        errorMessage = <p>{props.error.message}</p>;\n    }\n    \n    let redirect = null;\n    if (props.isAuthenticated) {\n        redirect = <Redirect to={authRedirectPath}/>;\n    }\n    \n    return (\n        <div className={styles.auth}>\n            {redirect}\n            {errorMessage}\n            <form onSubmit={submitHandler}>\n                {form}\n                <Button btnType=\"success\">SUBMIT</Button>\n            </form>\n    <Button btnType=\"danger\" clicked={switchAuthModeHandler}>SWITCH TO {isSignUp ? 'SIGN IN': 'SIGN UP'}</Button>\n        </div>\n    );\n   \n}\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        building: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth : (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport styles from './input.module.css';\nconst input= (props) => {\n    let inputElement = null;\n    let inpuntClasses = [styles.inputElement];\n    if (!props.valid && props.shouldValidate && props.touched) {\n        inpuntClasses.push(styles.invalid);\n       \n    }\n    switch(props.elementType) {\n\n        case('input'):\n            inputElement=<input \n                className={inpuntClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('textarea'):\n            inputElement=<textarea \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('select'):\n            inputElement=(<select \n                    className={inpuntClasses.join(' ')}  \n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option =>(\n                        <option value={option.value} key={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>);\n        break;\n        default:\n            inputElement=<input \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n\n    }\n    return (\n        <div className={styles.input}>\n            <label>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"input_input__LuMtH\",\"label\":\"input_label__1QbaT\",\"inputElement\":\"input_inputElement__nYoeg\",\"invalid\":\"input_invalid__10w9F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"auth_auth__3CCe0\",\"input\":\"auth_input__2NybL\"};"],"sourceRoot":""}