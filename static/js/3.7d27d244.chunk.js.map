{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/input.js","components/UI/Input/input.module.css","components/Order/CheckoutSummary/checkout-summary.module.css","containers/Checkout/ContactData/contact-data.module.css"],"names":["checkoutSummary","props","className","styles","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","postalCode","maxLength","minLength","country","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","customerData","formElementIdentifier","order","ings","price","customer","userId","onProcessOrder","token","inputChangedHandler","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","shouldValidate","changed","disabled","loading","Spinner","contactData","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","match","path","summary","to","purchasedRedirect","purchased","CheckoutSummary","component","input","inputElement","inpuntClasses","invalid","join","onChange","option","label","module","exports"],"mappings":"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","file":"static/js/3.7d27d244.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport styles from './checkout-summary.module.css';\nconst checkoutSummary = (props) => {\n    return (\n        <div className={styles.checkoutSummary}>\n            <h1>We hope it tastes well !!</h1>\n            <div style={{ width:'100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType=\"danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"success\" clicked={props.checkoutContinued}>SUCCESS</Button>\n        </div>\n    )\n\n}\n\nexport default checkoutSummary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/input';\nimport styles from './contact-data.module.css';\nimport axios from '../../../axios-orders';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updatedObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm:{\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            postalCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Postal Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    maxLength: 5,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value:'fastest',displayValue: 'Fastest'},\n                        {value:'cheapest',displayValue: 'Cheapest'} \n                    ]\n                },\n                value: 'fastest',\n                validation: {\n                },\n                valid: true,\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const customerData = {};\n        for (let formElementIdentifier in this.state.orderForm){\n            customerData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            customer: customerData,\n            userId: this.props.userId\n        }\n        this.props.onProcessOrder(order, this.props.token);\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n\n        const updatedFormElement = updatedObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n\n        })\n        const updatedForm = updatedObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n        let formIsValid = true;\n        for (let inputIdentifier in updatedForm) {\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedForm, formIsValid: formIsValid});\n\n    }\n    render() {\n        const formElementsArray = [];\n\n        for (let key in this.state.orderForm){\n            formElementsArray.push(\n                {\n                    id:key, \n                    config: this.state.orderForm[key]\n                }\n            )\n        }\n        let form = (<form onSubmit={this.orderHandler}>\n                        {formElementsArray.map(formElement =>(\n                            <Input key ={formElement.id}\n                                        elementType={formElement.config.elementType} \n                                        elementConfig={formElement.config.elementConfig}\n                                        value={formElement.config.value}\n                                        shouldValidate={formElement.config.validation}\n                                        valid={formElement.config.valid}\n                                        touched={formElement.config.touched}\n                                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                        ))}\n                        <Button btnType=\"success\" disabled={!this.state.formIsValid}>ORDER</Button></form>);\n\n        if (this.props.loading){\n            form = <Spinner/>;\n        }\n        return (\n            <div className={styles.contactData}>\n                <h4>Enter your contact data</h4>\n                {form}\n            </div>\n        );\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onProcessOrder: (order, token) => dispatch(actions.purchaseOrder(order, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace(this.props.match.path +'/contact-data');\n    }\n\n    render () {\n        let summary = <Redirect to=\"/\"/>;\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                    ingredients={this.props.ings}\n                    checkoutCancelled={this.checkoutCancelledHandler}\n                    checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route path={this.props.match.path + \"/contact-data\"} \n                        component={ContactData}/>\n                </div>\n\n            );\n        }\n        return summary;\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport styles from './input.module.css';\nconst input= (props) => {\n    let inputElement = null;\n    let inpuntClasses = [styles.inputElement];\n    if (!props.valid && props.shouldValidate && props.touched) {\n        inpuntClasses.push(styles.invalid);\n       \n    }\n    switch(props.elementType) {\n\n        case('input'):\n            inputElement=<input \n                className={inpuntClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('textarea'):\n            inputElement=<textarea \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n        case('select'):\n            inputElement=(<select \n                    className={inpuntClasses.join(' ')}  \n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option =>(\n                        <option value={option.value} key={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>);\n        break;\n        default:\n            inputElement=<input \n                className={inpuntClasses.join(' ')}  \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n        break;\n\n    }\n    return (\n        <div className={styles.input}>\n            <label>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"input_input__LuMtH\",\"label\":\"input_label__1QbaT\",\"inputElement\":\"input_inputElement__nYoeg\",\"invalid\":\"input_invalid__10w9F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkoutSummary\":\"checkout-summary_checkoutSummary__VQ2aZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactData\":\"contact-data_contactData__1NP_Q\",\"input\":\"contact-data_input__2YU7w\"};"],"sourceRoot":""}